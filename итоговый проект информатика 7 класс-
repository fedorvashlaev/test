import flet as ft
import pandas as pd
from datetime import datetime, timedelta

# Создаем глобальную переменную для хранения планов
plans = {}

# Основные праздники РФ
holidays = {
    "01-01": "Новый год",
    "07-01": "Рождество Христово",
    "23-02": "День защитника Отечества",
    "08-03": "Международный женский день",
    "01-05": "Праздник Весны и Труда",
    "09-05": "День Победы",
    "12-06": "День России",
    "04-11": "День народного единства"
}

# Функция для добавления плана
def add_plan(date, category, plan):
    if date not in plans:
        plans[date] = []
    plans[date].append({'category': category, 'plan': plan})

# Функция для получения оставшихся дней до заданной даты
def days_until(target_date):
    today = datetime.now().date()
    delta = target_date - today
    return delta.days

# Функция для отображения планов в таблице
def display_plans():
    data = []
    for date, entries in plans.items():
        for entry in entries:
            data.append({'Date': date, 'Category': entry['category'], 'Plan': entry['plan']})
    df = pd.DataFrame(data)
    return df

# Функция для сохранения планов в Excel
def save_to_excel():
    df = display_plans()
    df.to_excel('plans.xlsx', index=False)

# Основная функция приложения
def main(page: ft.Page):
    page.title = "Календарь планов"
    
    # Элементы интерфейса
    date_picker = ft.DatePicker(label="Выберите дату")
    category_input = ft.TextField(label="Категория плана")
    plan_input = ft.TextField(label="Ваш план")
    
    def on_add_plan(e):
        selected_date = date_picker.value
        category = category_input.value
        plan = plan_input.value
        
        # Добавляем план
        add_plan(selected_date, category, plan)
        
        # Очищаем поля ввода
        category_input.value = ""
        plan_input.value = ""
        
        # Обновляем таблицу
        update_table()

    def update_table():
        df = display_plans()
        table.data = df.to_dict(orient='records')
        page.update()

    # Кнопка для добавления плана
    add_button = ft.ElevatedButton("Добавить план", on_click=on_add_plan)

    # Таблица для отображения планов
    table = ft.DataTable(
        columns=[
            ft.DataColumn(ft.Text("Date")),
            ft.DataColumn(ft.Text("Category")),
            ft.DataColumn(ft.Text("Plan")),
        ],
        rows=[],
        width=500,
        height=300,
    )

    # Кнопка для сохранения в Excel
    save_button = ft.ElevatedButton("Сохранить в Excel", on_click=lambda e: save_to_excel())

    # Добавляем элементы на страницу
    page.add(date_picker, category_input, plan_input, add_button, table, save_button)

# Запуск приложения
ft.app(target=main)
