import pandas as pd
import flet as ft
import datetime
from datetime import date, time

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
plans = {}

# –¶–≤–µ—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–æ–≤ —Å –º–µ—Ç–∫–∞–º–∏
PLAN_COLORS = {
    "üî¥ Red": "#ffcdd2",
    "üíñ Pink": "#f8bbd0",
    "üü¢ Green": "#c8e6c9",
    "üü° Yellow": "#fff9c4",
    "üîµ Blue": "#bbdefb"
}

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
LANGUAGES = {
    "en": {
        "title": "Weekly Calendar Planner",
        "selected_date": "Selected date:",
        "category": "Category",
        "plan": "Plan",
        "start_time": "Start Time (HH:MM)",
        "end_time": "End Time (HH:MM)",
        "color": "Color",
        "add_plan": "Add Plan",
        "auto_distribute": "Auto-distribute tasks:",
        "tasks_hint": "Tasks (one per line)",
        "distribute": "Distribute Tasks",
        "plans_for_day": "Plans for selected day:",
        "time": "Time",
        "activity": "Activity",
        "save": "üíæ Save to Excel",
        "days": ["MON", "TUE", "WED", "THU", "FRI"]
    },
    "ru": {
        "title": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫",
        "selected_date": "–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:",
        "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        "plan": "–ü–ª–∞–Ω",
        "start_time": "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ß–ß:–ú–ú)",
        "end_time": "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ß–ß:–ú–ú)",
        "color": "–¶–≤–µ—Ç",
        "add_plan": "–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω",
        "auto_distribute": "–ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á:",
        "tasks_hint": "–ó–∞–¥–∞—á–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
        "distribute": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏",
        "plans_for_day": "–ü–ª–∞–Ω—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å:",
        "time": "–í—Ä–µ–º—è",
        "activity": "–ó–∞–Ω—è—Ç–∏–µ",
        "save": "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Excel",
        "days": ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢"]
    }
}

# –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
current_lang = "en"

def get_text(key):
    return LANGUAGES[current_lang].get(key, key)

def add_plan(date, category, plan, start_time, end_time, color):
    if date not in plans:
        plans[date] = []

    try:
        start = datetime.datetime.strptime(start_time, "%H:%M").time()
        end = datetime.datetime.strptime(end_time, "%H:%M").time()
    except ValueError:
        raise ValueError("Invalid time format. Use HH:MM")

    for existing_plan in plans[date]:
        existing_start = datetime.datetime.strptime(existing_plan['start_time'], "%H:%M").time()
        existing_end = datetime.datetime.strptime(existing_plan['end_time'], "%H:%M").time()

        if not (end <= existing_start or start >= existing_end):
            raise ValueError(
                f"Time conflict with existing plan: {existing_plan['plan']} ({existing_plan['start_time']}-{existing_plan['end_time']})")

    plans[date].append({
        'category': category,
        'plan': plan,
        'start_time': start_time,
        'end_time': end_time,
        'color': color,
        'color_code': PLAN_COLORS[color]
    })

    plans[date].sort(key=lambda x: datetime.datetime.strptime(x['start_time'], "%H:%M").time())

def distribute_plans(date, tasks, start_work="09:00", end_work="18:00", lunch_start="13:00", lunch_end="14:00"):
    if not tasks:
        return

    def str_to_time(s):
        return datetime.datetime.strptime(s, "%H:%M").time()

    work_start = str_to_time(start_work)
    work_end = str_to_time(end_work)
    lunch_start_time = str_to_time(lunch_start)
    lunch_end_time = str_to_time(lunch_end)

    if date in plans:
        del plans[date]

    current_time = work_start
    task_duration = (datetime.datetime.combine(datetime.date.today(), work_end) -
                    datetime.datetime.combine(datetime.date.today(), work_start)) // len(tasks)

    for i, task in enumerate(tasks):
        if current_time >= lunch_start_time and current_time < lunch_end_time:
            current_time = lunch_end_time

        end_time = (datetime.datetime.combine(datetime.date.today(), current_time) + task_duration).time()

        if end_time > work_end:
            end_time = work_end

        add_plan(
            date=date,
            category=task.get('category', 'Task'),
            plan=task['plan'],
            start_time=current_time.strftime("%H:%M"),
            end_time=end_time.strftime("%H:%M"),
            color=task.get('color', 'üîµ Blue')
        )

        current_time = end_time

def display_plans(selected_date):
    data = []
    if selected_date in plans:
        for entry in plans[selected_date]:
            data.append({
                'Date': selected_date,
                'Category': entry['category'],
                'Plan': entry['plan'],
                'Time': f"{entry['start_time']} - {entry['end_time']}",
                'Color': entry['color']
            })
    return data

def save_to_excel():
    all_data = []
    for date in plans:
        for entry in plans[date]:
            all_data.append({
                'Date': date,
                'Category': entry['category'],
                'Plan': entry['plan'],
                'Start Time': entry['start_time'],
                'End Time': entry['end_time'],
                'Color': entry['color']
            })
    df = pd.DataFrame(all_data)
    df.to_excel('plans.xlsx', index=False)

def main(page: ft.Page):
    global current_lang

    page.title = get_text("title")
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
    page.padding = 20
    page.theme_mode = "light"

    WHITE = "white"
    BLUE_100 = "#bbdefb"
    GREY_300 = "#e0e0e0"

    selected_date = datetime.datetime.now().date()

    # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    category_input = ft.TextField(label=get_text("category"), width=300, height=40)
    plan_input = ft.TextField(label=get_text("plan"), width=300, height=40, multiline=True, min_lines=2)
    start_time_input = ft.TextField(label=get_text("start_time"), width=140)
    end_time_input = ft.TextField(label=get_text("end_time"), width=140)
    time_row = ft.Row([start_time_input, end_time_input])

    color_dropdown = ft.Dropdown(
        label=get_text("color"),
        width=300,
        options=[ft.dropdown.Option(color) for color in PLAN_COLORS.keys()],
        value="üîµ Blue"
    )

    add_button = ft.ElevatedButton(get_text("add_plan"))

    distribute_tasks_input = ft.TextField(
        label=get_text("tasks_hint"),
        width=300,
        height=100,
        multiline=True
    )
    distribute_button = ft.ElevatedButton(get_text("distribute"))

    table = ft.DataTable(
        columns=[
            ft.DataColumn(ft.Text(get_text("time"))),
            ft.DataColumn(ft.Text(get_text("activity"))),
        ],
        rows=[],
        width=500,
    )

    selected_date_text = ft.Text(f"{get_text('selected_date')} {selected_date.strftime('%A, %B %d')}",
                                size=18, weight="bold")

    def change_language(e):
        global current_lang
        current_lang = "ru" if current_lang == "en" else "en"
        update_ui()

    # –ó–∞–º–µ–Ω—è–µ–º ft.icons.LANGUAGE –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    language_button = ft.IconButton(
        icon="language",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–º–µ—Å—Ç–æ icons.LANGUAGE
        on_click=change_language,
        tooltip="Switch language"
    )

    def create_day_card(day_name, day_number, current_date):
        is_selected = (current_date == selected_date)
        return ft.Container(
            width=100,
            height=120,
            border=ft.border.all(1, GREY_300),
            border_radius=5,
            bgcolor=WHITE if not is_selected else BLUE_100,
            padding=5,
            alignment=ft.alignment.center,
            content=ft.Column(
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                controls=[
                    ft.Text(day_name, weight="bold"),
                    ft.Text(day_number, size=20),
                ]
            ),
            data=current_date
        )

    def select_date(e):
        nonlocal selected_date
        selected_date = e.control.data
        update_ui()

    def on_add_plan(e):
        category = category_input.value
        plan = plan_input.value
        start_time = start_time_input.value
        end_time = end_time_input.value
        color = color_dropdown.value

        if category and plan and start_time and end_time:
            try:
                add_plan(selected_date, category, plan, start_time, end_time, color)
                category_input.value = ""
                plan_input.value = ""
                start_time_input.value = ""
                end_time_input.value = ""
                update_ui()
            except ValueError as ve:
                page.snack_bar = ft.SnackBar(ft.Text(str(ve)))
                page.snack_bar.open = True
                page.update()

    def on_distribute_tasks(e):
        tasks_text = distribute_tasks_input.value
        if not tasks_text:
            return

        tasks = []
        for line in tasks_text.split('\n'):
            if line.strip():
                tasks.append({
                    'plan': line.strip(),
                    'color': color_dropdown.value
                })

        try:
            distribute_plans(selected_date, tasks)
            distribute_tasks_input.value = ""
            update_ui()
        except Exception as ex:
            page.snack_bar = ft.SnackBar(ft.Text(str(ex)))
            page.snack_bar.open = True
            page.update()

    def update_ui():
        page.title = get_text("title")
        category_input.label = get_text("category")
        plan_input.label = get_text("plan")
        start_time_input.label = get_text("start_time")
        end_time_input.label = get_text("end_time")
        color_dropdown.label = get_text("color")
        add_button.text = get_text("add_plan")
        distribute_tasks_input.label = get_text("tasks_hint")
        distribute_button.text = get_text("distribute")
        selected_date_text.value = f"{get_text('selected_date')} {selected_date.strftime('%A, %B %d')}"
        table.columns[0].label = ft.Text(get_text("time"))
        table.columns[1].label = ft.Text(get_text("activity"))
        save_button.text = get_text("save")

        week_days.controls.clear()
        for i in range(5):
            current_date = selected_date + datetime.timedelta(days=i - (selected_date.weekday() - 0) % 7)
            day_name = get_text("days")[i]
            day_number = str(current_date.day)
            day_card = create_day_card(day_name, day_number, current_date)
            day_card.on_click = select_date
            if current_date == selected_date:
                day_card.bgcolor = BLUE_100
            week_days.controls.append(day_card)

        table.rows.clear()
        if selected_date in plans:
            for entry in plans[selected_date]:
                table.rows.append(
                    ft.DataRow(
                        cells=[
                            ft.DataCell(ft.Text(f"{entry['start_time']} - {entry['end_time']}")),
                            ft.DataCell(
                                ft.Row([
                                    ft.Text(entry['color'].split()[0], size=20),
                                    ft.Container(
                                        content=ft.Text(entry['plan']),
                                        padding=10,
                                        border_radius=5,
                                        bgcolor=entry['color_code'],
                                        width=350,
                                        expand=True
                                    )
                                ], spacing=5)
                            ),
                        ]
                    )
                )
        page.update()

    week_days = ft.Row(alignment="spaceEvenly")
    for i in range(5):
        current_date = selected_date + datetime.timedelta(days=i - (selected_date.weekday() - 0) % 7)
        day_name = get_text("days")[i]
        day_number = str(current_date.day)
        day_card = create_day_card(day_name, day_number, current_date)
        day_card.on_click = select_date
        if current_date == selected_date:
            day_card.bgcolor = BLUE_100
        week_days.controls.append(day_card)

    save_button = ft.ElevatedButton(get_text("save"), on_click=lambda e: save_to_excel())

    add_button.on_click = on_add_plan
    distribute_button.on_click = on_distribute_tasks

    page.add(
        ft.Row([
            ft.Text(get_text("title"), size=24, weight="bold"),
            language_button
        ], alignment="spaceBetween"),
        week_days,
        ft.Divider(height=20),
        selected_date_text,
        ft.Divider(height=20),
        ft.Row(
            controls=[
                ft.Column(
                    width=300,
                    controls=[
                        category_input,
                        plan_input,
                        time_row,
                        color_dropdown,
                        add_button,
                        ft.Divider(height=20),
                        ft.Text(get_text("auto_distribute"), weight="bold"),
                        distribute_tasks_input,
                        distribute_button,
                        save_button,
                    ],
                    spacing=10
                ),
                ft.VerticalDivider(width=20),
                ft.Column(
                    width=500,
                    controls=[
                        ft.Text(get_text("plans_for_day"), size=16),
                        ft.Container(
                            table,
                            border=ft.border.all(1, GREY_300),
                            padding=10,
                            border_radius=5
                        )
                    ]
                )
            ]
        )
    )

ft.app(target=main)
