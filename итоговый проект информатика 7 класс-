import pandas as pd
import flet as ft
import datetime
from datetime import date, time

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
plans = {}

# –¶–≤–µ—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–æ–≤ —Å –º–µ—Ç–∫–∞–º–∏
PLAN_COLORS = {
    "üî¥ Red": "#ffcdd2",
    "üíñ Pink": "#f8bbd0",
    "üü¢ Green": "#c8e6c9",
    "üü° Yellow": "#fff9c4",
    "üîµ Blue": "#bbdefb"
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞
def add_plan(date, category, plan, start_time, end_time, color):
    if date not in plans:
        plans[date] = []
    plans[date].append({
        'category': category,
        'plan': plan,
        'start_time': start_time,
        'end_time': end_time,
        'color': color,
        'color_code': PLAN_COLORS[color]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Ü–≤–µ—Ç–∞
    })
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    plans[date].sort(key=lambda x: x['start_time'])


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
def display_plans(selected_date):
    data = []
    if selected_date in plans:
        for entry in plans[selected_date]:
            data.append({
                'Date': selected_date,
                'Category': entry['category'],
                'Plan': entry['plan'],
                'Time': f"{entry['start_time']} - {entry['end_time']}",
                'Color': entry['color']
            })
    return data


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel
def save_to_excel():
    all_data = []
    for date in plans:
        for entry in plans[date]:
            all_data.append({
                'Date': date,
                'Category': entry['category'],
                'Plan': entry['plan'],
                'Start Time': entry['start_time'],
                'End Time': entry['end_time'],
                'Color': entry['color']
            })
    df = pd.DataFrame(all_data)
    df.to_excel('plans.xlsx', index=False)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main(page: ft.Page):
    page.title = "Weekly Calendar Planner"
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
    page.padding = 20
    page.theme_mode = "light"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ ft.ThemeMode.LIGHT

    # –¶–≤–µ—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫
    WHITE = "white"
    BLUE_100 = "#bbdefb"
    GREY_300 = "#e0e0e0"

    # –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
    selected_date = datetime.datetime.now().date()

    # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞
    category_input = ft.TextField(label="Category", width=300, height=40)
    plan_input = ft.TextField(label="Plan", width=300, height=40, multiline=True, min_lines=2)

    # –ü–æ–ª—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
    start_time_input = ft.TextField(label="Start Time (HH:MM)", width=140)
    end_time_input = ft.TextField(label="End Time (HH:MM)", width=140)
    time_row = ft.Row([start_time_input, end_time_input])

    # –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —Å —ç–º–æ–¥–∑–∏-–º–µ—Ç–∫–∞–º–∏
    color_dropdown = ft.Dropdown(
        label="Color",
        width=300,
        options=[ft.dropdown.Option(color) for color in PLAN_COLORS.keys()],
        value="üîµ Blue"
    )

    add_button = ft.ElevatedButton("Add Plan")

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
    table = ft.DataTable(
        columns=[
            ft.DataColumn(ft.Text("Time")),
            ft.DataColumn(ft.Text("Activity")),
        ],
        rows=[],
        width=500,
    )

    # –¢–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
    selected_date_text = ft.Text(f"Selected date: {selected_date.strftime('%A, %B %d')}",
                                 size=18, weight="bold")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ ft.FontWeight.BOLD

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–Ω—è
    def create_day_card(day_name, day_number, current_date):
        is_selected = (current_date == selected_date)
        return ft.Container(
            width=100,
            height=120,
            border=ft.border.all(1, GREY_300),
            border_radius=5,
            bgcolor=WHITE if not is_selected else BLUE_100,
            padding=5,
            alignment=ft.alignment.center,
            content=ft.Column(
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                controls=[
                    ft.Text(day_name, weight="bold"),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É
                    ft.Text(day_number, size=20),
                ]
            ),
            data=current_date  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
        )

    # –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    def select_date(e):
        nonlocal selected_date
        selected_date = e.control.data
        update_ui()

    # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞
    def on_add_plan(e):
        category = category_input.value
        plan = plan_input.value
        start_time = start_time_input.value
        end_time = end_time_input.value
        color = color_dropdown.value

        if category and plan and start_time and end_time:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
                start = datetime.datetime.strptime(start_time, "%H:%M").time()
                end = datetime.datetime.strptime(end_time, "%H:%M").time()

                if start >= end:
                    raise ValueError("End time must be after start time")

                add_plan(selected_date, category, plan, start_time, end_time, color)
                category_input.value = ""
                plan_input.value = ""
                start_time_input.value = ""
                end_time_input.value = ""
                update_ui()
            except ValueError as ve:
                page.snack_bar = ft.SnackBar(ft.Text(str(ve)))
                page.snack_bar.open = True
                page.update()

    # –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    def update_ui():
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç
        for day_card in week_days.controls:
            day_card.bgcolor = WHITE
            if day_card.data == selected_date:
                day_card.bgcolor = BLUE_100

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        selected_date_text.value = f"Selected date: {selected_date.strftime('%A, %B %d')}"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–ª–∞–Ω–∞–º–∏
        table.rows.clear()
        if selected_date in plans:
            for entry in plans[selected_date]:
                table.rows.append(
                    ft.DataRow(
                        cells=[
                            ft.DataCell(
                                ft.Text(f"{entry['start_time']} - {entry['end_time']}")
                            ),
                            ft.DataCell(
                                ft.Row([
                                    ft.Text(entry['color'].split()[0], size=20),  # –≠–º–æ–¥–∑–∏
                                    ft.Container(
                                        content=ft.Text(entry['plan']),
                                        padding=10,
                                        border_radius=5,
                                        bgcolor=entry['color_code'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥ —Ü–≤–µ—Ç–∞
                                        width=350,
                                        expand=True
                                    )
                                ], spacing=5)
                            ),
                        ]
                    )
                )
        page.update()

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    today = datetime.datetime.now().date()
    week_days = ft.Row(alignment="spaceEvenly")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ ft.MainAxisAlignment.SPACE_EVENLY

    for i in range(5):  # –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ø–Ω-–ø—Ç)
        current_date = today + datetime.timedelta(days=i)
        day_name = ["MON", "TUE", "WED", "THU", "FRI"][i]
        day_number = str(current_date.day)

        day_card = create_day_card(day_name, day_number, current_date)
        day_card.on_click = select_date

        if current_date == selected_date:
            day_card.bgcolor = BLUE_100

        week_days.controls.append(day_card)

    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
    save_button = ft.ElevatedButton(
        "üíæ Save to Excel",
        on_click=lambda e: save_to_excel()
    )

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    add_button.on_click = on_add_plan

    # –û—Å–Ω–æ–≤–Ω–æ–π layout
    page.add(
        ft.Text("Weekly Planner", size=24, weight="bold"),
        week_days,
        ft.Divider(height=20),
        selected_date_text,
        ft.Divider(height=20),
        ft.Row(
            controls=[
                ft.Column(
                    width=300,
                    controls=[
                        category_input,
                        plan_input,
                        time_row,
                        color_dropdown,
                        add_button,
                        save_button,
                    ],
                    spacing=10
                ),
                ft.VerticalDivider(width=20),
                ft.Column(
                    width=500,
                    controls=[
                        ft.Text("Plans for selected day:", size=16),
                        ft.Container(
                            table,
                            border=ft.border.all(1, GREY_300),
                            padding=10,
                            border_radius=5
                        )
                    ]
                )
            ]
        )
    )


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
ft.app(target=main)
