import pandas as pd
import flet as ft
import datetime
import platform
import sys
import subprocess
from typing import Dict, List

# Проверка платформы для GPIO
IS_RASPBERRY_PI = platform.machine() in ('armv7l', 'aarch64')

# Инициализация GPIO только на Raspberry Pi
btn_prev = None
btn_next = None
if IS_RASPBERRY_PI:
    try:
        from gpiozero import Button
        btn_prev = Button(17)
        btn_next = Button(18)
    except Exception as e:
        print(f"GPIO initialization error: {e}")
        IS_RASPBERRY_PI = False

# Глобальные переменные
plans: Dict[datetime.date, List[Dict]] = {}
current_lang = "en"

PLAN_COLORS = {
    "🔴 Red": "#ffcdd2",
    "💖 Pink": "#f8bbd0",
    "🟢 Green": "#c8e6c9",
    "🟡 Yellow": "#fff9c4",
    "🔵 Blue": "#bbdefb"
}

LANGUAGES = {
    "en": {
        "title": "Weekly Planner RPi",
        "selected_date": "Selected date:",
        "category": "Category",
        "plan": "Plan",
        "start_time": "Start Time (HH:MM)",
        "end_time": "End Time (HH:MM)",
        "color": "Color",
        "add_plan": "Add Plan",
        "plans_for_day": "Plans for selected day:",
        "save": "💾 Save",
        "clear_day": "Clear day",
        "clear_all": "Clear all",
        "days": ["MON", "TUE", "WED", "THU", "FRI"],
        "saved": "Saved!",
        "cleared_day": "Day cleared!",
        "cleared_all": "All cleared!",
        "fill_all_fields": "Please fill all fields",
        "invalid_time": "Invalid time format (HH:MM)",
        "time_conflict": "Time conflict with existing plans",
        "language": "Change language"
    },
    "ru": {
        "title": "Планировщик RPi",
        "selected_date": "Дата:",
        "category": "Категория",
        "plan": "План",
        "start_time": "Начало (ЧЧ:ММ)",
        "end_time": "Конец (ЧЧ:ММ)",
        "color": "Цвет",
        "add_plan": "Добавить",
        "plans_for_day": "Планы на день:",
        "save": "💾 Сохранить",
        "clear_day": "Очистить день",
        "clear_all": "Очистить всё",
        "days": ["ПН", "ВТ", "СР", "ЧТ", "ПТ"],
        "saved": "Сохранено!",
        "cleared_day": "День очищен!",
        "cleared_all": "Все очищено!",
        "fill_all_fields": "Заполните все поля",
        "invalid_time": "Некорректное время (ЧЧ:ММ)",
        "time_conflict": "Конфликт времени с существующими планами",
        "language": "Сменить язык"
    }
}

SCREEN_WIDTH = 800
SCREEN_HEIGHT = 480
WHITE = "#ffffff"
BLUE_100 = "#bbdefb"
GREY_300 = "#e0e0e0"

def get_text(key: str) -> str:
    return LANGUAGES[current_lang].get(key, key)

def validate_time(time_str: str) -> bool:
    try:
        datetime.datetime.strptime(time_str, "%H:%M")
        return True
    except ValueError:
        return False

def add_plan(date: datetime.date, category: str, plan: str, 
            start_time: str, end_time: str, color: str) -> None:
    if date not in plans:
        plans[date] = []

    try:
        start = datetime.datetime.strptime(start_time, "%H:%M").time()
        end = datetime.datetime.strptime(end_time, "%H:%M").time()
    except ValueError:
        raise ValueError(get_text("invalid_time"))

    for existing_plan in plans[date]:
        existing_start = datetime.datetime.strptime(existing_plan['start_time'], "%H:%M").time()
        existing_end = datetime.datetime.strptime(existing_plan['end_time'], "%H:%M").time()

        if not (end <= existing_start or start >= existing_end):
            raise ValueError(get_text("time_conflict"))

    plans[date].append({
        'category': category,
        'plan': plan,
        'start_time': start_time,
        'end_time': end_time,
        'color': color,
        'color_code': PLAN_COLORS[color]
    })
    plans[date].sort(key=lambda x: datetime.datetime.strptime(x['start_time'], "%H:%M").time())

def save_to_excel(page: ft.Page) -> None:
    try:
        data = []
        for date, entries in plans.items():
            for entry in entries:
                data.append({
                    'Date': date.strftime("%Y-%m-%d"),
                    'Category': entry['category'],
                    'Plan': entry['plan'],
                    'Start Time': entry['start_time'],
                    'End Time': entry['end_time'],
                    'Color': entry['color']
                })
        
        df = pd.DataFrame(data)
        filename = "weekly_plans.xlsx"
        df.to_excel(filename, index=False)
        
        page.snack_bar = ft.SnackBar(
            ft.Text(get_text("saved")),
            bgcolor="green"
        )
        page.snack_bar.open = True
        page.update()
    except Exception as e:
        page.snack_bar = ft.SnackBar(
            ft.Text(str(e)),
            bgcolor="red"
        )
        page.snack_bar.open = True
        page.update()

def main(page: ft.Page) -> None:
    global current_lang
    selected_date = datetime.datetime.now().date()

    # Функции должны быть объявлены перед использованием
    def change_language(e: ft.ControlEvent) -> None:
        global current_lang
        current_lang = "ru" if current_lang == "en" else "en"
        update_texts()
        update_ui()

    def update_texts() -> None:
        page.title = get_text("title")
        category_input.label = get_text("category")
        plan_input.label = get_text("plan")
        time_row.controls[0].label = get_text("start_time")
        time_row.controls[1].label = get_text("end_time")
        color_dropdown.label = get_text("color")
        plans_header_text.value = get_text("plans_for_day")
        language_btn.tooltip = get_text("language")
        add_plan_btn.text = get_text("add_plan")
        control_buttons.controls[0].text = get_text("save")
        control_buttons.controls[1].text = get_text("clear_day")
        control_buttons.controls[2].text = get_text("clear_all")

    # Элементы интерфейса
    category_input = ft.TextField(label=get_text("category"), width=300)
    plan_input = ft.TextField(label=get_text("plan"), multiline=True, min_lines=2)
    time_row = ft.Row([
        ft.TextField(label=get_text("start_time"), width=140),
        ft.TextField(label=get_text("end_time"), width=140)
    ])
    color_dropdown = ft.Dropdown(
        label=get_text("color"),
        options=[ft.dropdown.Option(c) for c in PLAN_COLORS],
        value="🔵 Blue"
    )
    plan_table = ft.DataTable(
        columns=[
            ft.DataColumn(ft.Text(get_text("time"))),
            ft.DataColumn(ft.Text(get_text("activity")))
        ],
        rows=[],
        width=500,
    )
    plans_header_text = ft.Text(get_text("plans_for_day"), size=16)
    language_btn = ft.IconButton(icon="language", tooltip=get_text("language"), on_click=change_language)

    def clear_day_plans(e: ft.ControlEvent) -> None:
        nonlocal selected_date
        if selected_date in plans:
            del plans[selected_date]
        page.snack_bar = ft.SnackBar(ft.Text(get_text("cleared_day")), bgcolor="green")
        page.snack_bar.open = True
        update_ui()

    def clear_all_plans(e: ft.ControlEvent) -> None:
        plans.clear()
        page.snack_bar = ft.SnackBar(ft.Text(get_text("cleared_all")), bgcolor="green")
        page.snack_bar.open = True
        update_ui()

    def on_add_plan(e: ft.ControlEvent) -> None:
        nonlocal selected_date
        try:
            category = category_input.value.strip()
            plan = plan_input.value.strip()
            start_time = time_row.controls[0].value.strip()
            end_time = time_row.controls[1].value.strip()
            color = color_dropdown.value

            if not all([category, plan, start_time, end_time]):
                raise ValueError(get_text("fill_all_fields"))

            if not validate_time(start_time) or not validate_time(end_time):
                raise ValueError(get_text("invalid_time"))

            add_plan(selected_date, category, plan, start_time, end_time, color)

            category_input.value = ""
            plan_input.value = ""
            time_row.controls[0].value = ""
            time_row.controls[1].value = ""
            color_dropdown.value = "🔵 Blue"

            update_ui()
        except Exception as ex:
            page.snack_bar = ft.SnackBar(ft.Text(str(ex)), bgcolor="red")
            page.snack_bar.open = True
            page.update()

    def create_day_card(day_name: str, day_number: str, current_date: datetime.date) -> ft.Container:
        return ft.Container(
            width=100,
            height=80,
            border=ft.border.all(1, GREY_300),
            border_radius=8,
            bgcolor=BLUE_100 if current_date == selected_date else WHITE,
            padding=8,
            alignment=ft.alignment.center,
            content=ft.Column([
                ft.Text(day_name, weight="bold"),
                ft.Text(day_number, size=18)
            ]),
            on_click=lambda e: select_date(e, current_date)
        )

    def select_date(e: ft.ControlEvent, date: datetime.date) -> None:
        nonlocal selected_date
        selected_date = date
        update_ui()

    week_days = ft.Row(alignment="spaceEvenly")
    for i in range(5):
        current_date = selected_date + datetime.timedelta(days=i - selected_date.weekday())
        week_days.controls.append(
            create_day_card(get_text("days")[i], str(current_date.day), current_date)
        )

    control_buttons = ft.Row([
        ft.ElevatedButton(
            get_text("save"),
            on_click=lambda _: save_to_excel(page),
            bgcolor="#4CAF50",
            color="white"
        ),
        ft.ElevatedButton(
            get_text("clear_day"),
            on_click=clear_day_plans,
            bgcolor="#f44336",
            color="white"
        ),
        ft.ElevatedButton(
            get_text("clear_all"),
            on_click=clear_all_plans,
            bgcolor="#ff9800",
            color="white"
        )
    ], spacing=10)

    add_plan_btn = ft.ElevatedButton(
        get_text("add_plan"),
        on_click=on_add_plan
    )

    def update_ui() -> None:
        week_days.controls.clear()
        for i in range(5):
            current_date = selected_date + datetime.timedelta(days=i - selected_date.weekday())
            week_days.controls.append(
                create_day_card(get_text("days")[i], str(current_date.day), current_date)
            )

        plan_table.rows.clear()
        if selected_date in plans:
            for entry in plans[selected_date]:
                plan_table.rows.append(ft.DataRow(
                    cells=[
                        ft.DataCell(ft.Text(f"{entry['start_time']} - {entry['end_time']}")),
                        ft.DataCell(ft.Row([
                            ft.Text(entry['color'].split()[0], size=20),
                            ft.Container(
                                ft.Text(entry['plan']),
                                padding=10,
                                bgcolor=entry['color_code'],
                                border_radius=5,
                                expand=True
                            )
                        ]))
                    ]
                ))
        page.update()

    # Инициализация интерфейса
    page.title = get_text("title")
    page.window_width = SCREEN_WIDTH
    page.window_height = SCREEN_HEIGHT
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
    page.padding = 20
    page.theme_mode = ft.ThemeMode.LIGHT

    page.add(
        ft.Column([
            ft.Row([
                ft.Text(get_text("title"), size=24, weight="bold"),
                language_btn
            ], alignment="spaceBetween"),
            week_days,
            ft.Divider(height=20),
            ft.Row([
                ft.Column([
                    category_input,
                    plan_input,
                    time_row,
                    color_dropdown,
                    add_plan_btn,
                    ft.Divider(),
                    control_buttons
                ], width=300),
                ft.VerticalDivider(width=20),
                ft.Column([
                    plans_header_text,
                    ft.Container(
                        plan_table,
                        border=ft.border.all(1, GREY_300),
                        padding=10,
                        border_radius=8
                    )
                ], width=500)
            ])
        ])
    )

    # GPIO обработчики
    if IS_RASPBERRY_PI and btn_prev and btn_next:
        def change_date(delta: int) -> None:
            nonlocal selected_date
            selected_date += datetime.timedelta(days=delta)
            page.run_task(lambda: update_ui())
        
        btn_prev.when_pressed = lambda: change_date(-1)
        btn_next.when_pressed = lambda: change_date(1)

    # Отключение屏保 для Linux
    if platform.system() == "Linux":
        subprocess.run(["xset", "-dpms"])
        subprocess.run(["xset", "s", "off"])

ft.app(target=main, view=ft.WEB_BROWSER)
