import pandas as pd
import flet as ft
import datetime
from datetime import date, time

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
plans = {}

# –¶–≤–µ—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–æ–≤ —Å –º–µ—Ç–∫–∞–º–∏
PLAN_COLORS = {
    "üî¥ Red": "#ffcdd2",
    "üíñ Pink": "#f8bbd0",
    "üü¢ Green": "#c8e6c9",
    "üü° Yellow": "#fff9c4",
    "üîµ Blue": "#bbdefb"
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
def add_plan(date, category, plan, start_time, end_time, color):
    if date not in plans:
        plans[date] = []

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –æ–±—ä–µ–∫—Ç—ã datetime.time –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    try:
        start = datetime.datetime.strptime(start_time, "%H:%M").time()
        end = datetime.datetime.strptime(end_time, "%H:%M").time()
    except ValueError:
        raise ValueError("Invalid time format. Use HH:MM")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏
    for existing_plan in plans[date]:
        existing_start = datetime.datetime.strptime(existing_plan['start_time'], "%H:%M").time()
        existing_end = datetime.datetime.strptime(existing_plan['end_time'], "%H:%M").time()

        if not (end <= existing_start or start >= existing_end):
            raise ValueError(
                f"Time conflict with existing plan: {existing_plan['plan']} ({existing_plan['start_time']}-{existing_plan['end_time']})")

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
    plans[date].append({
        'category': category,
        'plan': plan,
        'start_time': start_time,
        'end_time': end_time,
        'color': color,
        'color_code': PLAN_COLORS[color]
    })

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    plans[date].sort(key=lambda x: datetime.datetime.strptime(x['start_time'], "%H:%M").time())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
def distribute_plans(date, tasks, start_work="09:00", end_work="18:00", lunch_start="13:00", lunch_end="14:00"):
    if not tasks:
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã time
    def str_to_time(s):
        return datetime.datetime.strptime(s, "%H:%M").time()

    work_start = str_to_time(start_work)
    work_end = str_to_time(end_work)
    lunch_start_time = str_to_time(lunch_start)
    lunch_end_time = str_to_time(lunch_end)

    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    if date in plans:
        del plans[date]

    current_time = work_start
    task_duration = (datetime.datetime.combine(datetime.date.today(), work_end) -
                     datetime.datetime.combine(datetime.date.today(), work_start)) // len(tasks)

    for i, task in enumerate(tasks):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        if current_time >= lunch_start_time and current_time < lunch_end_time:
            current_time = lunch_end_time

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        end_time = (datetime.datetime.combine(datetime.date.today(), current_time) + task_duration).time()

        # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã, –æ–±—Ä–µ–∑–∞–µ–º
        if end_time > work_end:
            end_time = work_end

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω
        add_plan(
            date=date,
            category=task.get('category', 'Task'),
            plan=task['plan'],
            start_time=current_time.strftime("%H:%M"),
            end_time=end_time.strftime("%H:%M"),
            color=task.get('color', 'üîµ Blue')
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
        current_time = end_time


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
def display_plans(selected_date):
    data = []
    if selected_date in plans:
        for entry in plans[selected_date]:
            data.append({
                'Date': selected_date,
                'Category': entry['category'],
                'Plan': entry['plan'],
                'Time': f"{entry['start_time']} - {entry['end_time']}",
                'Color': entry['color']
            })
    return data


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel
def save_to_excel():
    all_data = []
    for date in plans:
        for entry in plans[date]:
            all_data.append({
                'Date': date,
                'Category': entry['category'],
                'Plan': entry['plan'],
                'Start Time': entry['start_time'],
                'End Time': entry['end_time'],
                'Color': entry['color']
            })
    df = pd.DataFrame(all_data)
    df.to_excel('plans.xlsx', index=False)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main(page: ft.Page):
    page.title = "Weekly Calendar Planner"
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
    page.padding = 20
    page.theme_mode = "light"

    # –¶–≤–µ—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    WHITE = "white"
    BLUE_100 = "#bbdefb"
    GREY_300 = "#e0e0e0"

    # –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
    selected_date = datetime.datetime.now().date()

    # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞
    category_input = ft.TextField(label="Category", width=300, height=40)
    plan_input = ft.TextField(label="Plan", width=300, height=40, multiline=True, min_lines=2)
    start_time_input = ft.TextField(label="Start Time (HH:MM)", width=140)
    end_time_input = ft.TextField(label="End Time (HH:MM)", width=140)
    time_row = ft.Row([start_time_input, end_time_input])

    # –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
    color_dropdown = ft.Dropdown(
        label="Color",
        width=300,
        options=[ft.dropdown.Option(color) for color in PLAN_COLORS.keys()],
        value="üîµ Blue"
    )

    add_button = ft.ElevatedButton("Add Plan")

    # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    distribute_tasks_input = ft.TextField(
        label="Tasks (one per line)",
        width=300,
        height=100,
        multiline=True
    )
    distribute_button = ft.ElevatedButton("Distribute Tasks")

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
    table = ft.DataTable(
        columns=[
            ft.DataColumn(ft.Text("Time")),
            ft.DataColumn(ft.Text("Activity")),
        ],
        rows=[],
        width=500,
    )

    # –¢–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
    selected_date_text = ft.Text(f"Selected date: {selected_date.strftime('%A, %B %d')}", size=18, weight="bold")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–Ω—è
    def create_day_card(day_name, day_number, current_date):
        is_selected = (current_date == selected_date)
        return ft.Container(
            width=100,
            height=120,
            border=ft.border.all(1, GREY_300),
            border_radius=5,
            bgcolor=WHITE if not is_selected else BLUE_100,
            padding=5,
            alignment=ft.alignment.center,
            content=ft.Column(
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                controls=[
                    ft.Text(day_name, weight="bold"),
                    ft.Text(day_number, size=20),
                ]
            ),
            data=current_date
        )

    # –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    def select_date(e):
        nonlocal selected_date
        selected_date = e.control.data
        update_ui()

    # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞
    def on_add_plan(e):
        category = category_input.value
        plan = plan_input.value
        start_time = start_time_input.value
        end_time = end_time_input.value
        color = color_dropdown.value

        if category and plan and start_time and end_time:
            try:
                add_plan(selected_date, category, plan, start_time, end_time, color)
                category_input.value = ""
                plan_input.value = ""
                start_time_input.value = ""
                end_time_input.value = ""
                update_ui()
            except ValueError as ve:
                page.snack_bar = ft.SnackBar(ft.Text(str(ve)))
                page.snack_bar.open = True
                page.update()

    # –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
    def on_distribute_tasks(e):
        tasks_text = distribute_tasks_input.value
        if not tasks_text:
            return

        tasks = []
        for line in tasks_text.split('\n'):
            if line.strip():
                tasks.append({
                    'plan': line.strip(),
                    'color': color_dropdown.value
                })

        try:
            distribute_plans(selected_date, tasks)
            distribute_tasks_input.value = ""
            update_ui()
        except Exception as ex:
            page.snack_bar = ft.SnackBar(ft.Text(str(ex)))
            page.snack_bar.open = True
            page.update()

    # –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    def update_ui():
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç
        for day_card in week_days.controls:
            day_card.bgcolor = WHITE
            if day_card.data == selected_date:
                day_card.bgcolor = BLUE_100

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        selected_date_text.value = f"Selected date: {selected_date.strftime('%A, %B %d')}"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–ª–∞–Ω–∞–º–∏
        table.rows.clear()
        if selected_date in plans:
            for entry in plans[selected_date]:
                table.rows.append(
                    ft.DataRow(
                        cells=[
                            ft.DataCell(
                                ft.Text(f"{entry['start_time']} - {entry['end_time']}")
                            ),
                            ft.DataCell(
                                ft.Row([
                                    ft.Text(entry['color'].split()[0], size=20),
                                    ft.Container(
                                        content=ft.Text(entry['plan']),
                                        padding=10,
                                        border_radius=5,
                                        bgcolor=entry['color_code'],
                                        width=350,
                                        expand=True
                                    )
                                ], spacing=5)
                            ),
                        ]
                    )
                )
        page.update()

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    today = datetime.datetime.now().date()
    week_days = ft.Row(alignment="spaceEvenly")

    for i in range(5):  # –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ø–Ω-–ø—Ç)
        current_date = today + datetime.timedelta(days=i)
        day_name = ["MON", "TUE", "WED", "THU", "FRI"][i]
        day_number = str(current_date.day)

        day_card = create_day_card(day_name, day_number, current_date)
        day_card.on_click = select_date

        if current_date == selected_date:
            day_card.bgcolor = BLUE_100

        week_days.controls.append(day_card)

    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    save_button = ft.ElevatedButton("üíæ Save to Excel", on_click=lambda e: save_to_excel())

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    add_button.on_click = on_add_plan
    distribute_button.on_click = on_distribute_tasks

    # –û—Å–Ω–æ–≤–Ω–æ–π layout
    page.add(
        ft.Text("Weekly Planner", size=24, weight="bold"),
        week_days,
        ft.Divider(height=20),
        selected_date_text,
        ft.Divider(height=20),
        ft.Row(
            controls=[
                ft.Column(
                    width=300,
                    controls=[
                        category_input,
                        plan_input,
                        time_row,
                        color_dropdown,
                        add_button,
                        ft.Divider(height=20),
                        ft.Text("Auto-distribute tasks:", weight="bold"),
                        distribute_tasks_input,
                        distribute_button,
                        save_button,
                    ],
                    spacing=10
                ),
                ft.VerticalDivider(width=20),
                ft.Column(
                    width=500,
                    controls=[
                        ft.Text("Plans for selected day:", size=16),
                        ft.Container(
                            table,
                            border=ft.border.all(1, GREY_300),
                            padding=10,
                            border_radius=5
                        )
                    ]
                )
            ]
        )
    )


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
ft.app(target=main)

